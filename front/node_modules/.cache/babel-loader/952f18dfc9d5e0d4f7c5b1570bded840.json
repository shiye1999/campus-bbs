{"ast":null,"code":"var global = require('../internals/global');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar MISSED_STICKY = require('../internals/regexp-sticky-helpers').MISSED_STICKY;\n\nvar classof = require('../internals/classof-raw');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar getInternalState = require('../internals/internal-state').get;\n\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError; // `RegExp.prototype.sticky` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky\n\nif (DESCRIPTORS && MISSED_STICKY) {\n  defineProperty(RegExpPrototype, 'sticky', {\n    configurable: true,\n    get: function () {\n      if (this === RegExpPrototype) return undefined; // We can't use InternalStateModule.getterFor because\n      // we don't add metadata for regexps created by a literal.\n\n      if (classof(this) === 'RegExp') {\n        return !!getInternalState(this).sticky;\n      }\n\n      throw TypeError('Incompatible receiver, RegExp required');\n    }\n  });\n}","map":{"version":3,"sources":["E:/gitTest/forum/front/node_modules/_core-js@3.21.1@core-js/modules/es.regexp.sticky.js"],"names":["global","require","DESCRIPTORS","MISSED_STICKY","classof","defineProperty","f","getInternalState","get","RegExpPrototype","RegExp","prototype","TypeError","configurable","undefined","sticky"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,oCAAD,CAAP,CAA8CE,aAAlE;;AACA,IAAIC,OAAO,GAAGH,OAAO,CAAC,0BAAD,CAArB;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,qCAAD,CAAP,CAA+CK,CAApE;;AACA,IAAIC,gBAAgB,GAAGN,OAAO,CAAC,6BAAD,CAAP,CAAuCO,GAA9D;;AAEA,IAAIC,eAAe,GAAGC,MAAM,CAACC,SAA7B;AACA,IAAIC,SAAS,GAAGZ,MAAM,CAACY,SAAvB,C,CAEA;AACA;;AACA,IAAIV,WAAW,IAAIC,aAAnB,EAAkC;AAChCE,EAAAA,cAAc,CAACI,eAAD,EAAkB,QAAlB,EAA4B;AACxCI,IAAAA,YAAY,EAAE,IAD0B;AAExCL,IAAAA,GAAG,EAAE,YAAY;AACf,UAAI,SAASC,eAAb,EAA8B,OAAOK,SAAP,CADf,CAEf;AACA;;AACA,UAAIV,OAAO,CAAC,IAAD,CAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAO,CAAC,CAACG,gBAAgB,CAAC,IAAD,CAAhB,CAAuBQ,MAAhC;AACD;;AACD,YAAMH,SAAS,CAAC,wCAAD,CAAf;AACD;AAVuC,GAA5B,CAAd;AAYD","sourcesContent":["var global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar MISSED_STICKY = require('../internals/regexp-sticky-helpers').MISSED_STICKY;\nvar classof = require('../internals/classof-raw');\nvar defineProperty = require('../internals/object-define-property').f;\nvar getInternalState = require('../internals/internal-state').get;\n\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\n\n// `RegExp.prototype.sticky` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky\nif (DESCRIPTORS && MISSED_STICKY) {\n  defineProperty(RegExpPrototype, 'sticky', {\n    configurable: true,\n    get: function () {\n      if (this === RegExpPrototype) return undefined;\n      // We can't use InternalStateModule.getterFor because\n      // we don't add metadata for regexps created by a literal.\n      if (classof(this) === 'RegExp') {\n        return !!getInternalState(this).sticky;\n      }\n      throw TypeError('Incompatible receiver, RegExp required');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}